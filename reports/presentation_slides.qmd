---
title: "Git & GitHub"
format: 
  revealjs:
    self-contained: true
    theme: default
author: Andrea Leitereg & Kevin Reuss

#fontsize: 28pt
---

# What is Git?

## 

![](git-logo.png){fig-align="center" width="300"}

Git is a free [**distributed version control system**]{.underline} that tracks versions of files.

## Distributed version control

![](distributed-version-control-diagram.png){fig-align="center"}

## Why is version control important? {.center}

![](tech-comics-version-control.png){fig-align="center"}

## Benefits of Git

Simplify collaboration

Ensure version control

Document changes to code (or other project materials!)

## How Git works

[![](git-workflow-image-1.png)](https://newsletter.techworld-with-milan.com/p/how-to-learn-git)

## Typical Git workflow

-   Initialize Git on a folder, making it a **Repository (or Repo)**

-   Work on your project! Change, add, or delete project files -- these are now considered **Modified**

-   Select the **Modified** files you want to **Stage**

-   **Staged** files are **Committed**, which prompts Git to store a permanent snapshot of the files

-   When you're ready to integrate your changes into the main project, **Push** your **Committed** changes to the **Main Repository**

## Key Git commands

![](git-workflow-image-2.png){fig-align="center"}

## Quick Demo

Basic commands with Git Bash!

# Popular Git tools

## What is a Git tool?

Git tools are web-based interfaces for managing projects and repositories with Git

![](github-logo.png){width="179"}

![](bitbucket-logo.png){width="216"}

![](gitlab-logo.png){width="226"}

# Intro to GitHub

## 

Uploaded files are stored to a **Git repository**

![](git-hub-image-1.png)

## 

Git automatically starts to **track and manage changes** (aka "commits")

![](git-hub-image-2.png)

## 

You can perform many actions in GitHub via the browser, but most people **work on a local copy of the repository on their own machine** ***(git pull)*** and then continually **sync local changes** **to the remote repository** ***(git push)*** on GitHub

![](distributed-version-control-diagram-2.png){fig-align="center"}

## Dos and Don'ts for using Git & GitHub \@ DOL

-   **Do** keep data and other potentially sensitive information stored [locally]{.underline} on your machine

-   **Don't** store any data or files containing PII on GitHub

-   **Do** keep repositories private (with a caveat)

## Git & the Data Project Lifecycle

![](Data%20Analysis%20Workflow%20Matrix%20-%207%20Steps%20-%20cropped.PNG)

## Quick Demo

Hello, world! in GitHub

# Git in Practice

## What will be covered in the demonstration 
::: {.incremental} 
-  Overview of how we (i.e., OPDR/DASP) typically organize our projects
-  How to get started with a new project 
-  How to work collaboratively on a project
-  A few other considerations and tips 
:::

## General principles that inform project organization
::: {.incremental}
- We want our projects to be:
  - **Reproducible and repeatable**
  - **Replicable and transparent**
  - **Collaborative**
  - **Accessible**
  - **Well-documented**
- Having your project organized gets you most of the way there!   
:::

## The stuff in a data project
![](project-contents.png){height=650}

## How those contents can be organized
![](project-folders.png){height=600}

## Overview of the organization of project files
![](full-project-org.png){height=550}

## Project files with a single shared file
![](project-single-file.png){height=550}

## Project with main file and local copies
![](project-multiple-files.png){height=550}

## Demo

## Final thoughts and tips

::: {.incremental}
- Thoughtful project organization is a key towards maintaining best practices
- Try to develop a structure that works across different types of projects
- When using Git, remember to commit, push, and pull often
- Use Git more holistically to manage your project, not just for script version control
  - e.g., also maintain your environment (renv in RStudio)
:::


## Homework
Complete the following tasks to put this knowledge into practice.

**Everyone should at least do the first item**

## Homework #1
- Assess your default project structure and consider how it could be improved to align with the principles discussed during this DatCon
- Assess what analysis tools you use and if Git could be incorporated with your work
- If Git could be incorporated, go on to Homework #2

## Homework #2
Put in a request to have Git installed on your machine (see the handout for more details)

## Homework #3
Create a personal GitHub account and create an organization for you team

## Homework #4
Create a new repository in GitHub  

## Homework #5
Connect your local machine to GitHub or other Git tool. If using RStudio, see the handout for resources that will guide you.

## Homework #6
If using R, Create a new R Project that is connected to the repository you created in GitHub

## Homework #7
Write some code

## Homework #8
Commit and push your code to your repo

## Homework #9
Review the handout to learn more about renv and other resources that will help you manage your project





