---
title: "Git & GitHub"
format: revealjs
author: Andrea Leitereg & Kevin Reuss
#fontsize: 28pt
---

# What is Git?

## Purpose

**Efficiency:** Simplify collaboration


**Reproducibility:** Ensure version control


**Transparency:** Document changes to code (or other project materials!)


## Why is version control important? {.center}

![](tech-comics-version-control.png){fig-align="center"}

## How Git works

[![](git-workflow-image-1.png)](https://newsletter.techworld-with-milan.com/p/how-to-learn-git)

## Typical project flow

-   Initialize Git on a folder, making it a **Repository (or Repo)**

-   Work on your project! Change, add, or delete project files -- these are now considered **Modified**

-   Select the **Modified** files you want to **Stage**

-   **Staged** files are **Committed**, which prompts Git to store a permanent snapshot of the files

-   When you're ready to integrate your changes into the main project, **Push** your **Committed** changes to the **Main Repository**

## Key Git commands

![](git-workflow-image-2.png){fig-align="center"}

## Quick Demo

Run through basic commands via Git Bash.

# Popular Git tools

## What is a Git tool?

Instead of using a command line interface, many coders choose to use web-based interfaces for managing their repositories with Git

![](github-logo.png){width="179"}

![](bitbucket-logo.png){width="216"}

![](gitlab-logo.png){width="226"}

## GitHub

Uploaded files are stored to a **Git repository**

Git automatically starts to **track and manage changes** (aka "commits")

You can perform many actions in GitHub via the browser, but most people **work on their own machine** and then continually **sync local changes** to the central repository on GitHub (For example, OPDR uses the RStudio Git extension to sync to GitHub)

## GitHub

Once you start to collaborate with others and all need to work on the same repository at the same time, you'll continually:

-   **Pull** all the latest changes made by your collaborators from the remote repository on GitHub

-   **Push** back your own changes to the same remote repository on GitHub

Git figures out how to merge this flow of changes, and GitHub helps you manage the flow through features such as "pull requests"

::: {style="font-size: 50%;"}
(Source: https://docs.github.com/en/get-started/start-your-journey/about-github-and-git)
:::

## Dos and Don'ts for using Git & GitHub \@ DOL

-   **Do** keep data and other potentially sensitive information stored locally on your machine

-   **Don't** store any data or files containing PII on GitHub

## How do Git and GitHub fit into the data project lifecycle?

Reference Dave's visual

## Quick Demo

Virtual tour of DASP-OPDR's GitHub page or "Hello World" exercise.

# Git in Practice

## How we use Git to work collaboratively

## Demo
